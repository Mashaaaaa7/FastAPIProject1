from fastapi import FastAPI, UploadFile, File, HTTPException, Depends, Header
from fastapi.middleware.cors import CORSMiddleware
import os
import shutil
from datetime import datetime
import logging
from typing import List, Dict, Optional

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI()

app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤ –ø–∞–º—è—Ç–∏
files_storage = []
history_storage = []  # ‚Üê –î–æ–±–∞–≤–ª—è–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
UPLOAD_DIR = "uploads"
os.makedirs(UPLOAD_DIR, exist_ok=True)


# –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ (–¥–ª—è –¥–µ–º–æ)
def verify_token(authorization: Optional[str] = Header(None)):
    if not authorization:
        raise HTTPException(status_code=401, detail="Authorization header missing")

    if not authorization.startswith("Bearer "):
        raise HTTPException(status_code=401, detail="Invalid authorization format")

    token = authorization.replace("Bearer ", "")

    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –≤ –ë–î)
    if not token:
        raise HTTPException(status_code=401, detail="Invalid token")

    return token

@app.post("/upload")
async def upload_pdf(file: UploadFile = File(...), authorization: Optional[str] = Header(None)):
    logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª: {file.filename}")
    logger.info(f"üîê –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {authorization}")

    if not file.filename:
        raise HTTPException(400, "No file provided")

    if not file.filename.lower().endswith(".pdf"):
        raise HTTPException(400, "Only PDF files are allowed")

    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        file_path = os.path.join(UPLOAD_DIR, file.filename)
        logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤: {file_path}")

        with open(file_path, "wb") as buffer:
            content = await file.read()
            buffer.write(content)

        file_size = len(content)
        logger.info(f"‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω, —Ä–∞–∑–º–µ—Ä: {file_size} bytes")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        file_info = {
            "name": file.filename,
            "file_size": file_size,
            "created_at": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }
        files_storage.append(file_info)

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é
        history_record = {
            "action": "upload_pdf",
            "filename": file.filename,
            "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "details": f"Uploaded PDF file: {file.filename} ({file_size} bytes)"
        }
        history_storage.append(history_record)

        return {
            "success": True,
            "message": f"File {file.filename} uploaded successfully",
            "filename": file.filename
        }

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        raise HTTPException(500, f"Server error: {str(e)}")


@app.get("/decks")
def list_decks():
    return {"success": True, "decks": files_storage}


@app.post("/decks/{deck_name}/cards")
async def create_cards(deck_name: str):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª
    file_exists = any(f["name"] == deck_name for f in files_storage)
    if not file_exists:
        raise HTTPException(404, "PDF file not found")

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é
    history_record = {
        "action": "create_cards",
        "deck_name": deck_name,
        "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "details": f"Created flashcards from deck: {deck_name}"
    }
    history_storage.append(history_record)

    # –î–µ–º–æ-–∫–∞—Ä—Ç–æ—á–∫–∏
    cards = [
        {"id": 1, "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ React?", "answer": "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è UI", "deck_name": deck_name},
        {"id": 2, "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç?", "answer": "–ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–∞—è —á–∞—Å—Ç—å UI", "deck_name": deck_name},
        {"id": 3, "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ useState?", "answer": "–•—É–∫ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ React", "deck_name": deck_name},
    ]

    return {"success": True, "cards": cards, "deck_name": deck_name, "total": len(cards)}


@app.delete("/decks/{deck_name}")
async def delete_deck(deck_name: str):
    # –ò—â–µ–º –∏ —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
    global files_storage
    file_exists = any(f["name"] == deck_name for f in files_storage)
    if not file_exists:
        raise HTTPException(404, "PDF file not found")

    # –£–¥–∞–ª—è–µ–º –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    files_storage = [f for f in files_storage if f["name"] != deck_name]

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é
    history_record = {
        "action": "delete_deck",
        "deck_name": deck_name,
        "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "details": f"Deleted deck: {deck_name}"
    }
    history_storage.append(history_record)

    return {"success": True, "message": f"Deck {deck_name} deleted"}


# ‚Üê –î–û–ë–ê–í–õ–Ø–ï–ú –ù–û–í–´–ô ENDPOINT –î–õ–Ø –ò–°–¢–û–†–ò–ò
@app.get("/history")
async def get_history():
    logger.info("üìñ –ó–∞–ø—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏ –¥–µ–π—Å—Ç–≤–∏–π")
    return {
        "success": True,
        "history": history_storage,
        "total": len(history_storage)
    }


@app.get("/")
async def root():
    return {"message": "Flashcards API is working! üöÄ"}